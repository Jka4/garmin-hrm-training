{"version":3,"sources":["components/Slider.js","App.js","index.js"],"names":["Slider","_ref","_ref$current","currentHeartRate","currentZoneFinded","ref","useRef","width","current","offsetWidth","compensations","step","maxHR","minHR","solo","position","sliderElementWidth","el","end","start","_jsxs","className","children","_jsx","hrZones","map","_Fragment","style","background","color","name","left","hrm","App","_useState","useState","_useState2","_slicedToArray","setCurrentHeartRate","_useState3","_useState4","isDeviceConnected","setIsDeviceConnected","_useState5","_useState6","deviceName","setDeviceName","heartRateChange","event","target","value","getUint8","isConnected","service","device","gatt","connected","useEffect","navigator","bluetooth","getDevices","then","res","find","addEventListener","connect","server","getPrimaryService","getCharacteristic","character","startNotifications","e","catch","console","error","colorBackground","concat","id","onClick","requestDevice","filters","services","_","rootNode","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.405406da.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport { hrZones, maxHR, minHR } from '../App';\n\nconst Slider = ({ currentHeartRate, currentZoneFinded }) => {\n  const ref = useRef(null);\n\n  const width = ref?.current?.offsetWidth || 0;\n  const compensations = 5 / 109 + 1;\n  const hrGap = maxHR - minHR;\n  const step = width / hrGap;\n  const solo = step * (currentHeartRate - minHR);\n  const gap = solo * compensations - solo;\n  const positionPrep = solo * compensations - gap;\n  const position = currentHeartRate <= minHR ? -10 : positionPrep;\n\n  const sliderElementWidth = (el) => (el.end - el.start) * step * compensations + 'px';\n\n  return (\n    <div className=\"slider-container\" ref={ref}>\n      <div className=\"slider\">\n        {hrZones?.map((el) => (\n          <>\n            <div\n              key={el.name}\n              className=\"slider-elem\"\n              style={{ background: el.color, width: sliderElementWidth(el) }}\n            />\n          </>\n        ))}\n      </div>\n\n      <div className=\"pointer\">\n        {!!currentZoneFinded && <div className=\"pointer-runner\" style={{ left: position }} />}\n      </div>\n    </div>\n  );\n};\n\nexport default Slider;\n","import React, { useState, useEffect } from 'react';\nimport Slider from './components/Slider';\n\nlet hrm = { id: 'EzpcWrVsiXwz5gsmsWmNsg==', name: 'HRM-Pro:121191' };\n\nexport const minHR = 97;\n\nexport const maxHR = 194;\n\nexport const hrZones = [\n  { name: 1, color: 'gray', start: minHR, end: 115 },\n  { name: 2, color: 'blue', start: 116, end: 134 },\n  { name: 3, color: 'green', start: 135, end: 153 },\n  { name: 4, color: 'orange', start: 154, end: 173 },\n  { name: 5, color: 'red', start: 174, end: maxHR },\n];\n\nconst App = () => {\n  const [currentHeartRate, setCurrentHeartRate] = useState(0);\n  const [isDeviceConnected, setIsDeviceConnected] = useState(false);\n  const [deviceName, setDeviceName] = useState(null);\n\n  const heartRateChange = (event) => {\n    const value = event.target.value;\n    const currentHeartRate = value.getUint8(1);\n\n    const isConnected = event.target.service.device.gatt.connected;\n\n    setIsDeviceConnected(!!isConnected);\n    setCurrentHeartRate(currentHeartRate);\n  };\n\n  const BLEConnect = () => {\n    // @ts-ignore\n    return navigator.bluetooth\n      .requestDevice({ filters: [{ services: ['heart_rate'] }] })\n      .then((device) => {\n        device.addEventListener('gattserverdisconnected', () => {\n          setIsDeviceConnected(false);\n        });\n\n        return device.gatt.connect();\n      })\n      .then((server) => {\n        return server.getPrimaryService('heart_rate');\n      })\n      .then((service) => {\n        return service.getCharacteristic('heart_rate_measurement');\n      })\n      .then((character) => {\n        return character.startNotifications().then((_) => {\n          character.addEventListener('characteristicvaluechanged', (e) => {\n            heartRateChange(e);\n          });\n        });\n      })\n      .catch((e) => console.error(e));\n  };\n\n  useEffect(() => {\n    // @ts-ignore\n    navigator.bluetooth\n      .getDevices()\n      .then((res) => {\n        const device = res.find((el) => el.name === hrm.name);\n\n        if (device) setDeviceName(device.name);\n\n        device.addEventListener('gattserverdisconnected', () => {\n          setIsDeviceConnected(false);\n        });\n\n        if (!isDeviceConnected) return device.gatt.connect();\n        return null;\n      })\n      .then((server) => {\n        return server.getPrimaryService('heart_rate');\n      })\n      .then((service) => {\n        return service.getCharacteristic('heart_rate_measurement');\n      })\n      .then((character) => {\n        return character.startNotifications().then(() => {\n          character.addEventListener('characteristicvaluechanged', (e) => {\n            heartRateChange(e);\n          });\n        });\n      })\n      .catch((e) => console.error(e));\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const currentZoneFinded = hrZones.find((el) => el.start <= currentHeartRate && el.end >= currentHeartRate);\n  const colorBackground = `${currentHeartRate > maxHR ? 'red' : currentZoneFinded?.color || 'white'}`;\n\n  return (\n    <div id=\"app\">\n      <button onClick={BLEConnect}>{isDeviceConnected ? 'CONNECTED' : 'START'}</button>\n\n      <span>device: {isDeviceConnected ? deviceName : '-'}</span>\n\n      <Slider currentHeartRate={currentHeartRate} currentZoneFinded={currentZoneFinded} />\n\n      <div className=\"gauge\" style={{ background: colorBackground }}>\n        <div className=\"title\">HR:</div>\n        <div className=\"hear-rate\">{currentHeartRate}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/index.css';\nimport './styles/App.css';\n\nconst rootNode = document.getElementById('root');\n\nReactDOM.render(<App />, rootNode);\n"],"sourceRoot":""}